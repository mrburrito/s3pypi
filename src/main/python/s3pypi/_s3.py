from enum import Enum
import itertools
import os
import re

import boto3

_pypi_bucket = os.getenv('PYPI_BUCKET')
_package_root_key = os.getenv('PYPI_PACKAGE_ROOT_KEY')
_index_root_key = os.getenv('PYPI_INDEX_ROOT_KEY')


if not _pypi_bucket:
    raise EnvironmentError('PYPI_BUCKET is not defined')

if not _package_root_key:
    raise EnvironmentError('PYPI_PACKAGE_ROOT_KEY is not defined')

if not _index_root_key:
    raise EnvironmentError('PYPI_INDEX_ROOT_KEY is not defined')


class ContentType(Enum):
    JSON = 'application/json'
    HTML = 'text/html'
    TEXT = 'text/plain'

    def __repr__(self):
        return '{}.{}'.format(self.__class__.__name__, self.name)


def _list_files(prefix=None):
    """
    List the objects in the PyPi Bucket with the given prefix

    :param prefix: the object key prefix
    :type prefix: str

    :return: the list of objects with the specified prefix
    :rtype: list
    """
    if not prefix:
        prefix = ''

    paginator = boto3.client('s3').get_paginator('list_objects_v2')
    return list(itertools.chain.from_iterable([
        p['Contents'] for p in paginator.paginate(Bucket=_pypi_bucket, Prefix=prefix)
    ]))


def _is_index_object(obj_def):
    """
    Returns true if the object key appears to be an index object
    generated by this function

    :param obj_def: the S3 object definition
    :type obj_def: dict

    :return: True if the object key is an index object
    :rtype: bool
    """
    if not obj_def or 'Key' not in obj_def:
        return False

    object_key = obj_def['Key']
    object_name = os.path.basename(object_key)

    has_index_prefix = object_key.starts_with(_index_root_key)
    has_package_prefix = object_key.starts_with(_package_root_key)
    is_index_file = object_name in ['index.html', 'json']

    return has_index_prefix and not has_package_prefix and is_index_file


def clean_index():
    """
    Clean the index files in the target bucket.
    """
    index_files = [obj for obj in _list_files(_index_root_key) if _is_index_object(obj)]
    batch_size = 500
    s3 = boto3.client('s3')
    for batch in [index_files[n:n+batch_size] for n in range(0, len(index_files), batch_size)]:
        s3.delete_objects(Bucket=_pypi_bucket, Delete=[dict(Key=o['Key']) for o in batch])


def write_index_file(key, content, content_type=None):
    """
    Writes the index file to the target key in the PyPi bucket.

    :param key: the index object key; appended to the configured index root key
    :type key: str
    :param content: the content of the file
    :type content: str
    :param content_type: the content type of the index file; default: HTML
    :type content_type: ContentType
    """
    if not content_type:
        content_type = ContentType.HTML

    boto3.client('s3').put_object(Bucket=_pypi_bucket,
                                  Key='/'.join([p for p in [_index_root_key, key] if p]),
                                  ACL='public-read',
                                  Body=content.encode('UTF-8'),
                                  ContentEncoding='UTF-8',
                                  ContentType=content_type.value)


def _strip_prefix(key, prefix):
    """
    Strips the prefix from the object key.

    :param key: the object key
    :type key: str
    :param prefix: the prefix to strip
    :type prefix: str

    :return: the object key with all content following the prefix
    :rtype: str
    """
    if not key or not prefix:
        return key

    if not prefix.endswith('/'):
        prefix = '{}/'.format(prefix)

    return re.sub(r'^{}'.format(prefix), '', key)


def list_packages():
    """
    :return: the list of package files, relative to the configured package root key prefix
    :rtype: list
    """
    return [_strip_prefix(p['Key'], _package_root_key) for p in _list_files(_package_root_key)]
